<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Account" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="AccountNameAlreadyTaken" xml:space="preserve">
    <value>Account name {0} is already taken. Choose another.</value>
  </data>
  <data name="AccountNameIsInvalid" xml:space="preserve">
    <value>Account name is invalid</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Address2" xml:space="preserve">
    <value>Address (row 2)</value>
  </data>
  <data name="APetitionHasBeenSentToYourPeer" xml:space="preserve">
    <value>A petition has been sent to your peer</value>
  </data>
  <data name="Area" xml:space="preserve">
    <value>Area</value>
  </data>
  <data name="CantConnectTo" xml:space="preserve">
    <value>Can't connect to {0}</value>
  </data>
  <data name="ChooseAccount" xml:space="preserve">
    <value>Choose account</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="Connect" xml:space="preserve">
    <value>Connect</value>
  </data>
  <data name="Continue" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="CreateNew" xml:space="preserve">
    <value>Create new</value>
  </data>
  <data name="DomainDoesNotFollowEncryptionPolicy" xml:space="preserve">
    <value>{0} does not follow the ubiquitous encryption policy</value>
  </data>
  <data name="DomainIsNotAValidOperator" xml:space="preserve">
    <value>{0} is not a valid operator</value>
  </data>
  <data name="DomainNameIsInvalid" xml:space="preserve">
    <value>Domain name is invalid</value>
  </data>
  <data name="ErrorTitle" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>First name</value>
  </data>
  <data name="InvalidUsernameOrPassword" xml:space="preserve">
    <value>Invalid username or password</value>
  </data>
  <data name="InvitePeerToReview" xml:space="preserve">
    <value>Invite peer to review</value>
  </data>
  <data name="LastNames" xml:space="preserve">
    <value>Last name(s)</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="MiddleNames" xml:space="preserve">
    <value>Middle name(s)</value>
  </data>
  <data name="NotConnectedToTheOperator" xml:space="preserve">
    <value>Not connected to the operator</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="OperatorDoesNotSupportLegalIdentitiesAndSmartContracts" xml:space="preserve">
    <value>Operator does not support legal identities and smart contracts</value>
  </data>
  <data name="OperatorDoesNotSupportRegisteringNewAccounts" xml:space="preserve">
    <value>The operator {0} does not support registration of new accounts</value>
  </data>
  <data name="OperatorDomainOther" xml:space="preserve">
    <value>&lt;Other&gt;</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordIsInvalid" xml:space="preserve">
    <value>Password is invalid</value>
  </data>
  <data name="PasswordsDoNotMatch" xml:space="preserve">
    <value>Passwords do not match</value>
  </data>
  <data name="PeerReviewAccepted" xml:space="preserve">
    <value>Peer review accepted</value>
  </data>
  <data name="PeerReviewRejected" xml:space="preserve">
    <value>Peer review rejected</value>
  </data>
  <data name="PersonalLegalInfoText" xml:space="preserve">
    <value>To be able to get a wallet, perform transactions and sign smart contracts, you need an attested personal or legal identity assigned to your account.</value>
  </data>
  <data name="PersonalNumber" xml:space="preserve">
    <value>Personal number</value>
  </data>
  <data name="PersonalNumberDoesNotMatchCountry" xml:space="preserve">
    <value>The personal number does not match national personal number regulations</value>
  </data>
  <data name="PersonalNumberDoesNotMatchCountry_ExpectedFormat" xml:space="preserve">
    <value>The personal number does not match national personal number regulations. Expected format: </value>
  </data>
  <data name="PetitionSent" xml:space="preserve">
    <value>Petition sent</value>
  </data>
  <data name="PhotoIsTooLarge" xml:space="preserve">
    <value>Photo is too large</value>
  </data>
  <data name="PickPhoto" xml:space="preserve">
    <value>Pick photo</value>
  </data>
  <data name="QrEnterManually" xml:space="preserve">
    <value>Enter manually</value>
  </data>
  <data name="QrScanAddButton" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="QrScanCode" xml:space="preserve">
    <value>Scan code</value>
  </data>
  <data name="QrScanLegalIdentity" xml:space="preserve">
    <value>Legal Identity:</value>
  </data>
  <data name="QrScanOverlay" xml:space="preserve">
    <value>Align the QR-Code within the frame</value>
  </data>
  <data name="Region" xml:space="preserve">
    <value>Region or State</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="RetypePassword" xml:space="preserve">
    <value>Retype password</value>
  </data>
  <data name="SelectingAPhotoIsNotSupported" xml:space="preserve">
    <value>Selecting a photo is not supported on this device</value>
  </data>
  <data name="SelectOperator" xml:space="preserve">
    <value>Select Operator</value>
  </data>
  <data name="TakePhoto" xml:space="preserve">
    <value>Take photo</value>
  </data>
  <data name="TakingAPhotoIsNotSupported" xml:space="preserve">
    <value>Taking a photo is not supported on this device</value>
  </data>
  <data name="ThePasswordForTheConnectionIs" xml:space="preserve">
    <value>The password for the connection is {0}</value>
  </data>
  <data name="TheSpecifiedCodeIsNotALegalIdentity" xml:space="preserve">
    <value>The specified code is not a legal identity</value>
  </data>
  <data name="ToConnectToDomainYouNeedAnAccount" xml:space="preserve">
    <value>To connect to {0}, you need an account. Do you want to create one, or use an existing account?</value>
  </data>
  <data name="UnableToAuthenticateWith" xml:space="preserve">
    <value>Unable to authenticate with {0}</value>
  </data>
  <data name="UnableToConnectTo" xml:space="preserve">
    <value>Unable to connect to {0}</value>
  </data>
  <data name="UseExisting" xml:space="preserve">
    <value>Use existing</value>
  </data>
  <data name="WelcomeToTagHeading" xml:space="preserve">
    <value>Welcome to TAG Xamarin App!</value>
  </data>
  <data name="WelcomeToTagSubheading" xml:space="preserve">
    <value>To connect to the TAG network, you need to select an operator. Please select one from the list below.</value>
  </data>
  <data name="XmppState_Authenticating" xml:space="preserve">
    <value>Authenticating network identity</value>
  </data>
  <data name="XmppState_Binding" xml:space="preserve">
    <value>Binding connection</value>
  </data>
  <data name="XmppState_Connected" xml:space="preserve">
    <value>Connected to {0}</value>
  </data>
  <data name="XmppState_Connecting" xml:space="preserve">
    <value>Establishing connection</value>
  </data>
  <data name="XmppState_Error" xml:space="preserve">
    <value>Connection error</value>
  </data>
  <data name="XmppState_FetchingRoster" xml:space="preserve">
    <value>Fetching roster</value>
  </data>
  <data name="XmppState_Offline" xml:space="preserve">
    <value>Disconnected</value>
  </data>
  <data name="XmppState_Registering" xml:space="preserve">
    <value>Registering with broker</value>
  </data>
  <data name="XmppState_RequestingSession" xml:space="preserve">
    <value>Requesting session</value>
  </data>
  <data name="XmppState_SettingPresence" xml:space="preserve">
    <value>Setting presence</value>
  </data>
  <data name="XmppState_StartingEncryption" xml:space="preserve">
    <value>Encrypting connection</value>
  </data>
  <data name="XmppState_StreamNegotiation" xml:space="preserve">
    <value>Negotiating stream</value>
  </data>
  <data name="XmppState_StreamOpened" xml:space="preserve">
    <value>Stream established</value>
  </data>
  <data name="YouNeedToProvideACountry" xml:space="preserve">
    <value>You need to select a country</value>
  </data>
  <data name="YouNeedToProvideAFirstName" xml:space="preserve">
    <value>You need to provide a first name</value>
  </data>
  <data name="YouNeedToProvideALastName" xml:space="preserve">
    <value>You need to provide at least one last name</value>
  </data>
  <data name="YouNeedToProvideAPersonalNumber" xml:space="preserve">
    <value>You need to provide a personal or social security number</value>
  </data>
  <data name="ZipCode" xml:space="preserve">
    <value>Zip or Postal Code</value>
  </data>
</root>